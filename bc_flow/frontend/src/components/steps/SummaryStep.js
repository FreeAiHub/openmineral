import React, { useState, useEffect } from 'react';

const SummaryStep = ({ formData, onBack }) => {
  const [taskStatus, setTaskStatus] = useState('processing');
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü–∏—è Celery –∑–∞–¥–∞—á–∏ (15 —Å–µ–∫—É–Ω–¥)
    const startTime = Date.now();
    const duration = 15000; // 15 —Å–µ–∫—É–Ω–¥

    const interval = setInterval(() => {
      const elapsed = Date.now() - startTime;
      const newProgress = Math.min((elapsed / duration) * 100, 100);
      setProgress(newProgress);

      if (elapsed >= duration) {
        setTaskStatus('completed');
        clearInterval(interval);
      }
    }, 100);

    return () => clearInterval(interval);
  }, []);

  const renderProcessingView = () => (
    <div className="processing-view">
      <h2>üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–∫–∏...</h2>
      <div className="progress-container" style={{
        background: '#f0f0f0',
        borderRadius: '10px',
        padding: '3px',
        margin: '20px 0'
      }}>
        <div 
          className="progress-bar"
          style={{
            background: '#007bff',
            height: '20px',
            borderRadius: '8px',
            width: `${progress}%`,
            transition: 'width 0.1s ease'
          }}
        />
      </div>
      <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(progress)}%</p>
      <div className="processing-steps">
        <p>‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞</p>
        <p>‚úÖ AI –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω</p>
        <p>{progress > 30 ? '‚úÖ' : 'üîÑ'} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</p>
        <p>{progress > 60 ? '‚úÖ' : '‚è≥'} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
        <p>{progress > 90 ? '‚úÖ' : '‚è≥'} –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</p>
      </div>
      <div className="celery-info" style={{
        background: '#e3f2fd',
        padding: '10px',
        borderRadius: '5px',
        marginTop: '20px'
      }}>
        <h4>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
        <p>‚Ä¢ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ Celery Worker</p>
        <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis –∫–∞–∫ message broker</p>
        <p>‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–µ mock)</p>
      </div>
    </div>
  );

  const renderCompletedView = () => (
    <div className="completed-view">
      <h2>‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!</h2>
      
      <div className="success-summary" style={{
        background: '#d4edda',
        border: '1px solid #c3e6cb',
        padding: '20px',
        borderRadius: '5px',
        margin: '20px 0'
      }}>
        <h3>üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <div className="deal-summary">
          <p><strong>Deal ID:</strong> BC-{Date.now()}</p>
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> Confirmed ‚úÖ</p>
          <p><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> 15.0 —Å–µ–∫</p>
          <p><strong>–ú–∞—Ç–µ—Ä–∏–∞–ª:</strong> {formData.material || 'Zinc Concentrate'}</p>
          <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> {formData.quantity || '1000'} MT</p>
          <p><strong>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</strong> {formData.buyer || 'Trading Corp'}</p>
        </div>
      </div>

      <div className="chart-placeholder" style={{
        background: '#f8f9fa',
        border: '2px dashed #dee2e6',
        padding: '40px',
        textAlign: 'center',
        borderRadius: '5px',
        margin: '20px 0'
      }}>
        <h4>üìà –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h4>
        <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏</p>
        <p>(Price trends, Risk analysis, Market comparison)</p>
      </div>

      <div className="next-steps" style={{
        background: '#fff3cd',
        padding: '15px',
        borderRadius: '5px',
        margin: '20px 0'
      }}>
        <h4>üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</h4>
        <ul>
          <li>‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —Å—Ç–æ—Ä–æ–Ω–∞–º</li>
          <li>‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥–µ</li>
          <li>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</li>
          <li>‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏</li>
        </ul>
      </div>

      <div className="form-actions">
        <button 
          type="button" 
          onClick={onBack}
          className="btn-secondary"
          style={{ 
            background: '#6c757d',
            color: 'white',
            padding: '10px 20px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            marginRight: '10px'
          }}
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É
        </button>
        <button 
          type="button" 
          onClick={() => window.location.reload()}
          className="btn-primary"
          style={{ 
            background: '#28a745',
            color: 'white',
            padding: '10px 20px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üîÑ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞
        </button>
      </div>
    </div>
  );

  return (
    <div className="summary-step">
      {taskStatus === 'processing' ? renderProcessingView() : renderCompletedView()}
    </div>
  );
};

export default SummaryStep;
