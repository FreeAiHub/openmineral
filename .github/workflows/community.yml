name: Community Management

on:
  issues:
    types: [opened, edited, labeled]
  pull_request:
    types: [opened, edited, labeled, ready_for_review]
  issue_comment:
    types: [created]

jobs:
  welcome:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Welcome new contributors
        uses: actions/github-script@v7
        with:
          script: |
            const isFirstTimeContributor = context.payload.sender.type === 'User';
            
            if (context.eventName === 'issues' && isFirstTimeContributor) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸ‘‹ Welcome to OpenMineral! Thanks for opening your first issue.

                **Next Steps:**
                - A maintainer will review your issue within 2 business days
                - Check out our [Contributing Guidelines](CONTRIBUTING.md) if you're interested in contributing
                - Join our [Discord community](https://discord.gg/openmineral) for real-time discussions
                
                **For AI/ML related issues:**
                - Please specify which AI model or framework is affected
                - Include relevant code snippets or error messages
                - Mention performance requirements or constraints
                
                We appreciate your contribution to improving commodity trading technology! ðŸš€`
              });
            }
            
            if (context.eventName === 'pull_request' && isFirstTimeContributor) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸŽ‰ Thanks for your first pull request! 

                **Review Process:**
                - Code quality checks will run automatically
                - A maintainer will review your PR within 2 business days
                - Please ensure all tests pass and follow our coding standards
                
                **AI/ML Contributions:**
                - Include model performance benchmarks if applicable
                - Document any new dependencies or requirements
                - Consider security implications for AI integrations
                
                Looking forward to your contribution! ðŸ’ª`
              });
            }

  auto-label:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Auto-label issues and PRs
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue?.title || context.payload.pull_request?.title;
            const body = context.payload.issue?.body || context.payload.pull_request?.body;
            const content = (title + ' ' + body).toLowerCase();
            
            const labels = [];
            
            // Component-based labels
            if (content.includes('fastapi') || content.includes('backend') || content.includes('api')) {
              labels.push('backend');
            }
            if (content.includes('react') || content.includes('frontend') || content.includes('ui')) {
              labels.push('frontend');
            }
            if (content.includes('langchain') || content.includes('ai') || content.includes('ml') || content.includes('claude') || content.includes('gpt')) {
              labels.push('ai-ml');
            }
            if (content.includes('docker') || content.includes('kubernetes') || content.includes('terraform') || content.includes('aws') || content.includes('azure')) {
              labels.push('infrastructure');
            }
            if (content.includes('database') || content.includes('postgresql') || content.includes('mongodb') || content.includes('redis')) {
              labels.push('database');
            }
            
            // Priority-based labels
            if (content.includes('urgent') || content.includes('critical') || content.includes('production')) {
              labels.push('priority:high');
            }
            if (content.includes('security') || content.includes('vulnerability')) {
              labels.push('security');
            }
            
            // AI-specific labels
            if (content.includes('model') || content.includes('training') || content.includes('prediction')) {
              labels.push('model-improvement');
            }
            if (content.includes('performance') || content.includes('latency') || content.includes('speed')) {
              labels.push('performance');
            }
            
            if (labels.length > 0) {
              const issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
              github.rest.issues.addLabels({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
            }

  community-metrics:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Track community metrics
        uses: actions/github-script@v7
        with:
          script: |
            // Track various community metrics
            const metrics = {
              timestamp: new Date().toISOString(),
              event_type: context.eventName,
              contributor: context.payload.sender.login,
              is_first_time: context.payload.sender.type === 'User',
              repository: context.repo.repo
            };
            
            // Store metrics (in a real implementation, this would go to a metrics service)
            console.log('Community Metrics:', JSON.stringify(metrics, null, 2));

  ai-model-mention-alert:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Alert for AI model discussions
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue?.title || context.payload.pull_request?.title;
            const body = context.payload.issue?.body || context.payload.pull_request?.body;
            const content = (title + ' ' + body).toLowerCase();
            
            const aiModels = ['claude', 'gpt-4', 'llama', 'gemini', 'langchain', 'langgraph'];
            const mentionedModels = aiModels.filter(model => content.includes(model));
            
            if (mentionedModels.length > 0) {
              const issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
              
              github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸ¤– **AI Model Discussion Detected**
                
                This ${context.eventName.replace('_', ' ')} mentions: ${mentionedModels.join(', ')}
                
                **AI Team Review Requested** ðŸ§ 
                - @ai-ml-team please review for technical accuracy
                - Consider performance and cost implications
                - Verify compliance with AI usage policies
                
                **Resources:**
                - [AI Integration Guidelines](docs/ai-integration.md)
                - [Model Performance Benchmarks](docs/benchmarks.md)
                - [LangChain Best Practices](docs/langchain-guide.md)`
              });
              
              // Add ai-ml label
              github.rest.issues.addLabels({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['ai-ml', 'needs-ai-review']
              });
            }

  trading-domain-check:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Check for trading domain complexity
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue?.title || context.payload.pull_request?.title;
            const body = context.payload.issue?.body || context.payload.pull_request?.body;
            const content = (title + ' ' + body).toLowerCase();
            
            const tradingTerms = [
              'trading', 'commodity', 'risk', 'hedging', 'portfolio', 'kyc', 'compliance',
              'var', 'value at risk', 'position', 'margin', 'settlement', 'clearing'
            ];
            
            const mentionedTerms = tradingTerms.filter(term => content.includes(term));
            
            if (mentionedTerms.length >= 2) {
              const issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
              
              github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸ“Š **Trading Domain Expertise Required**
                
                This ${context.eventName.replace('_', ' ')} involves complex trading concepts: ${mentionedTerms.join(', ')}
                
                **Domain Expert Review Requested** ðŸ’¼
                - @trading-team please review for business logic accuracy
                - Verify compliance with trading regulations
                - Consider risk management implications
                
                **Trading Resources:**
                - [Trading Lifecycle Documentation](docs/trading-lifecycle.md)
                - [Risk Management Guidelines](docs/risk-management.md)
                - [Compliance Requirements](docs/compliance.md)`
              });
              
              github.rest.issues.addLabels({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['trading-domain', 'needs-domain-review']
              });
            }