"""
Chroma RAG Service –¥–ª—è OpenMineralHub
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ AI –∞–Ω–∞–ª–∏–∑–∞
"""

import chromadb
import json
import os
import uuid
from typing import List, Dict, Any, Optional
from datetime import datetime
import logging
from pydantic import BaseModel
from fastapi import HTTPException
from config.chroma_config import chroma_config

# New imports for RAG
from openai import OpenAI
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.schema import StrOutputParser

logger = logging.getLogger(__name__)

class MineralDocument(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–∏–Ω–µ—Ä–∞–ª–∞"""
    commodity: str
    name_ru: str
    name_en: str
    symbol: str
    commodity_type: str
    current_price_usd: float
    unit: str
    market: str
    annual_production: float
    top_producers: List[str]
    main_uses: List[str]
    description: str
    document: str
    metadata: Dict[str, Any]

class DealDocument(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–¥–µ–ª–∫–∏"""
    deal_id: str
    commodity: str
    counterparty: str
    quantity: float
    price_usd: float
    total_amount_usd: float
    date: str
    status: str
    risk_level: str
    region: str
    document: str
    metadata: Dict[str, Any]

class KYCDocument(BaseModel):
    """–ú–æ–¥–µ–ª—å KYC –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    company_name: str
    lei: str
    jurisdiction: str
    industry: str
    aml_status: str
    risk_score: int
    verification_sources: List[str]
    document: str
    metadata: Dict[str, Any]

class ChromaService:
    """
    Chroma RAG Service –¥–ª—è OpenMineralHub
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ Cloud ChromaDB –¥–ª—è production –∏ —Ç–µ—Å—Ç–æ–≤
    """
    
    COLLECTIONS = {
        "minerals": "openmineral_minerals",
        "deals": "openmineral_deals", 
        "kyc": "openmineral_kyc"
    }
    
    def __init__(self, is_test_mode: bool = False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Chroma (Cloud –¥–ª—è prod, –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
        self.is_test_mode = is_test_mode
        self.test_db_path = "./chroma_test_db"
        
        try:
            if is_test_mode:
                # –õ–æ–∫–∞–ª—å–Ω—ã–π ChromaDB –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (persistent)
                self.client = chromadb.PersistentClient(path=self.test_db_path)
                logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π ChromaDB –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.test_db_path}")
            else:
                # Cloud ChromaDB –¥–ª—è production
                self.client = chromadb.CloudClient(
                    api_key=chroma_config.API_KEY,
                    tenant=chroma_config.TENANT,
                    database=chroma_config.DATABASE
                )
                logger.info(f"Chroma Cloud –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {chroma_config.get_connection_string()}")
            
            self._setup_collections()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chroma: {e}")
            raise HTTPException(status_code=500, detail=f"Chroma init error: {str(e)}")
    
    def _setup_collections(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        # –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–∏–Ω–µ—Ä–∞–ª–æ–≤
        self.minerals_collection = self.client.get_or_create_collection(
            name=self.COLLECTIONS["minerals"],
            metadata={
                "description": "–ö–∞—Ç–∞–ª–æ–≥ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ OpenMineralHub",
                "version": "1.0",
                "project": "OpenMineralHub",
                "environment": "test" if self.is_test_mode else "production"
            }
        )
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–¥–µ–ª–æ–∫
        self.deals_collection = self.client.get_or_create_collection(
            name=self.COLLECTIONS["deals"],
            metadata={
                "description": "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ OpenMineralHub",
                "version": "1.0", 
                "project": "OpenMineralHub",
                "environment": "test" if self.is_test_mode else "production"
            }
        )
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏—è KYC/Compliance
        self.kyc_collection = self.client.get_or_create_collection(
            name=self.COLLECTIONS["kyc"],
            metadata={
                "description": "KYC –∏ compliance –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "version": "1.0",
                "project": "OpenMineralHub",
                "compliance_standard": "AML_KYC",
                "environment": "test" if self.is_test_mode else "production"
            }
        )
        
        logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏–∏ Chroma –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def load_initial_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_test_mode:
            print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é ChromaDB...")
        else:
            print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö OpenMineralHub...")
        
        # 1. –ú–∏–Ω–µ—Ä–∞–ª—ã (5 –∫–ª—é—á–µ–≤—ã—Ö)
        minerals = [
            {
                "id": "cu_base_metal",
                "document": "–ú–µ–¥—å (Cu) - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –º–µ—Ç–∞–ª–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏. –ö—Ä—É–ø–Ω–µ–π—à–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏: –ß–∏–ª–∏ (28%), –ü–µ—Ä—É (10%), –ö–∏—Ç–∞–π (8%). –¶–µ–Ω–∞ LME: $9,500/—Ç–æ–Ω–Ω–∞. –°–ø—Ä–æ—Å —Ä–∞—Å—Ç–µ—Ç –∏–∑-–∑–∞ –∑–µ–ª–µ–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π. –ì–æ–¥–æ–≤–∞—è –¥–æ–±—ã—á–∞: 21 –º–ª–Ω —Ç–æ–Ω–Ω.",
                "metadata": {
                    "commodity": "copper",
                    "name_ru": "–ú–µ–¥—å",
                    "name_en": "Copper",
                    "type": "base_metal",
                    "symbol": "Cu",
                    "current_price": 9500,
                    "unit": "USD/ton",
                    "market": "LME",
                    "annual_production": 21000000,
                    "top_producers": ["Chile", "Peru", "China"],
                    "main_uses": ["wiring", "construction", "electronics", "renewables"],
                    "risk_factors": ["china_demand", "green_energy"],
                    "source": "openmineral_catalog",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "li_battery_material",
                "document": "–õ–∏—Ç–∏–π (Li) - —â–µ–ª–æ—á–Ω–æ–π –º–µ—Ç–∞–ª–ª, –∫–ª—é—á–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ª–∏—Ç–∏–π-–∏–æ–Ω–Ω—ã—Ö –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –°–ø—Ä–æ—Å –≤—ã—Ä–æ—Å –Ω–∞ 300% –∑–∞ 5 –ª–µ—Ç. –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: —Å–æ–ª—è–Ω—ã–µ –æ–∑–µ—Ä–∞ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ (50%), –ß–∏–ª–∏ (30%). –¶–µ–Ω–∞ –∫–∞—Ä–±–æ–Ω–∞—Ç–∞ –ª–∏—Ç–∏—è: $15,000/—Ç–æ–Ω–Ω–∞. –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –¥–æ 2030 –≥–æ–¥–∞ –∏–∑-–∑–∞ EV boom.",
                "metadata": {
                    "commodity": "lithium",
                    "name_ru": "–õ–∏—Ç–∏–π",
                    "name_en": "Lithium", 
                    "type": "battery_material",
                    "symbol": "Li",
                    "current_price": 15000,
                    "unit": "USD/ton",
                    "market": "battery_index",
                    "annual_production": 130000,
                    "top_producers": ["Australia", "Chile", "Argentina"],
                    "main_uses": ["EV_batteries", "energy_storage", "renewables"],
                    "risk_factors": ["supply_chain", "environmental", "price_volatility"],
                    "source": "openmineral_catalog",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "au_precious_metal",
                "document": "–ó–æ–ª–æ—Ç–æ (Au) - –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –º–µ—Ç–∞–ª–ª, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏—è—Ö (50%), –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö (40%), —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ (10%). –¢–µ–∫—É—â–∞—è —Å–ø–æ—Ç —Ü–µ–Ω–∞: $2,650/—É–Ω—Ü–∏—è. –ö—Ä—É–ø–Ω–µ–π—à–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏: –ö–∏—Ç–∞–π (11%), –ê–≤—Å—Ç—Ä–∞–ª–∏—è (10%), –†–æ—Å—Å–∏—è (9%). –ó–æ–ª–æ—Ç–æ —Å–ª—É–∂–∏—Ç –∑–∞—â–∏—Ç–Ω—ã–º –∞–∫—Ç–∏–≤–æ–º –≤–æ –≤—Ä–µ–º—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏–∑–∏—Å–æ–≤ –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏.",
                "metadata": {
                    "commodity": "gold",
                    "name_ru": "–ó–æ–ª–æ—Ç–æ",
                    "name_en": "Gold",
                    "type": "precious_metal",
                    "symbol": "Au",
                    "current_price": 2650,
                    "unit": "USD/oz",
                    "market": "COMEX",
                    "annual_production": 3300,
                    "top_producers": ["China", "Australia", "Russia"],
                    "main_uses": ["jewelry", "investment", "electronics"],
                    "risk_factors": ["inflation", "geopolitics", "central_banks"],
                    "source": "openmineral_catalog",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "ni_base_metal",
                "document": "–ù–∏–∫–µ–ª—å (Ni) - –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –º–µ—Ç–∞–ª–ª, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏ (65%), —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ (20%), —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–ª–∞–≤–æ–≤ (10%). –ö—Ä—É–ø–Ω–µ–π—à–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: –ò–Ω–¥–æ–Ω–µ–∑–∏—è (50% –º–∏—Ä–æ–≤–æ–π –¥–æ–±—ã—á–∏). –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è: –°–æ—Ä–æ–≤–∏—è (–ò–Ω–¥–æ–Ω–µ–∑–∏—è), –ù–æ—Ä–∏–ª—å—Å–∫ (–†–æ—Å—Å–∏—è). –¶–µ–Ω–∞ LME: $18,000/—Ç–æ–Ω–Ω–∞.",
                "metadata": {
                    "commodity": "nickel",
                    "name_ru": "–ù–∏–∫–µ–ª—å",
                    "name_en": "Nickel",
                    "type": "base_metal",
                    "symbol": "Ni",
                    "current_price": 18000,
                    "unit": "USD/ton",
                    "market": "LME",
                    "annual_production": 2500000,
                    "top_producers": ["Indonesia", "Philippines", "Russia"],
                    "main_uses": ["stainless_steel", "EV_batteries", "alloys"],
                    "risk_factors": ["export_bans", "supply_concentration", "environmental"],
                    "source": "openmineral_catalog",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "fe_industrial_metal",
                "document": "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞ (Fe) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å—ã—Ä—å–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å—Ç–∞–ª–∏ (98% –º–∏—Ä–æ–≤–æ–π –¥–æ–±—ã—á–∏). –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã: –ê–≤—Å—Ç—Ä–∞–ª–∏—è (55%), –ë—Ä–∞–∑–∏–ª–∏—è (20%), –ö–∏—Ç–∞–π (–∏–º–ø–æ—Ä—Ç). –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è: –•—ç–º—ç—Ä—Å–ª–∏ (–ê–≤—Å—Ç—Ä–∞–ª–∏—è), –ö–∞—Ä–∏—Ö–∞—Ä–∞ (–ë—Ä–∞–∑–∏–ª–∏—è). –¶–µ–Ω–∞ –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã 62% Fe: $110/—Ç–æ–Ω–Ω–∞ –Ω–∞ DCE. –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: 2.6 –º–ª—Ä–¥ —Ç–æ–Ω–Ω/–≥–æ–¥.",
                "metadata": {
                    "commodity": "iron_ore",
                    "name_ru": "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞",
                    "name_en": "Iron Ore",
                    "type": "industrial_metal",
                    "symbol": "Fe",
                    "current_price": 110,
                    "unit": "USD/ton",
                    "market": "DCE",
                    "annual_production": 2600000000,
                    "top_producers": ["Australia", "Brazil", "China"],
                    "main_uses": ["steel_production", "construction", "infrastructure"],
                    "risk_factors": ["china_economy", "global_infrastructure", "environmental"],
                    "source": "openmineral_catalog",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            }
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–µ—Ä–∞–ª–æ–≤
        mineral_docs = [m["document"] for m in minerals]
        mineral_meta = [m["metadata"] for m in minerals]
        mineral_ids = [m["id"] for m in minerals]
        
        self.minerals_collection.add(
            documents=mineral_docs,
            metadatas=mineral_meta,
            ids=mineral_ids
        )
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(minerals)} –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{self.COLLECTIONS['minerals']}'")
        
        # 2. –°–¥–µ–ª–∫–∏ (5 –ø—Ä–∏–º–µ—Ä–æ–≤)
        deals = [
            {
                "id": "deal_omh_001_cu_glencore",
                "document": "–¢–æ—Ä–≥–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ OMH-001: –ü—Ä–æ–¥–∞–∂–∞ 500 —Ç–æ–Ω–Ω –º–µ–¥–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ç—Ä–µ–π–¥–µ—Ä—É Glencore International AG. –¶–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: $9,500 –∑–∞ —Ç–æ–Ω–Ω—É. –û–±—â–∞—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Å—É–º–º–∞: $4,750,000 USD. –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è: 15 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞. –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏: –ø–µ—Ä–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª 2025 –≥–æ–¥–∞. –ü–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏: –í–∞–ª—å–ø–∞—Ä–∞–∏—Å–æ, –ß–∏–ª–∏. –£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏: FOB. –í–∞–ª—é—Ç–∞ —Ä–∞—Å—á–µ—Ç–æ–≤: USD. –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏, –≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è). –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: Glencore (–®–≤–µ–π—Ü–∞—Ä–∏—è, LEI: 213800E2AWGCG8J3CS80).",
                "metadata": {
                    "deal_id": "OMH-001",
                    "type": "spot_sale",
                    "commodity": "copper",
                    "quantity_tons": 500,
                    "price_usd_per_ton": 9500,
                    "total_amount_usd": 4750000,
                    "date": "2025-01-15",
                    "delivery_period": "Q1_2025",
                    "counterparty": "Glencore International AG",
                    "port": "Valparaiso",
                    "incoterms": "FOB",
                    "currency": "USD",
                    "status": "confirmed",
                    "risk_level": "medium",
                    "risk_factors": ["latin_america_logistics", "currency_fluctuation"],
                    "region": "South_America",
                    "compliance_status": "verified",
                    "source": "trading_system",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "deal_omh_002_li_sqm",
                "document": "–¢–æ—Ä–≥–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ OMH-002: –ó–∞–∫—É–ø–∫–∞ 200 —Ç–æ–Ω–Ω –∫–∞—Ä–±–æ–Ω–∞—Ç–∞ –ª–∏—Ç–∏—è —É Sociedad Qu√≠mica y Minera de Chile S.A. (SQM). –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: $15,000 –∑–∞ —Ç–æ–Ω–Ω—É. –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: $3,000,000 USD. –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è: 1 —Ñ–µ–≤—Ä–∞–ª—è 2025 –≥–æ–¥–∞. –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏: –≤—Ç–æ—Ä–æ–π –∫–≤–∞—Ä—Ç–∞–ª 2025 –≥–æ–¥–∞. –ü—É–Ω–∫—Ç –æ—Ç–≥—Ä—É–∑–∫–∏: –ê–Ω—Ç–æ—Ñ–∞–≥–∞—Å—Ç–∞, –ß–∏–ª–∏. –£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏: CIF –ø–æ—Ä—Ç –†–æ—Ç—Ç–µ—Ä–¥–∞–º, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã. –í–∞–ª—é—Ç–∞ —Ä–∞—Å—á–µ—Ç–æ–≤: USD. –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ß–∏–ª–∏, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –Ω–∞ –ª–∏—Ç–∏–π). –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: SQM S.A. (–ß–∏–ª–∏, LEI: 549300J7U7O5Z4K6U171).",
                "metadata": {
                    "deal_id": "OMH-002",
                    "type": "spot_purchase",
                    "commodity": "lithium",
                    "quantity_tons": 200,
                    "price_usd_per_ton": 15000,
                    "total_amount_usd": 3000000,
                    "date": "2025-02-01",
                    "delivery_period": "Q2_2025",
                    "counterparty": "SQM S.A.",
                    "port_origin": "Antofagasta",
                    "port_destination": "Rotterdam",
                    "incoterms": "CIF",
                    "currency": "USD",
                    "status": "negotiation",
                    "risk_level": "high",
                    "risk_factors": ["chile_politics", "lithium_price_volatility", "supply_chain"],
                    "region": "South_America",
                    "compliance_status": "pending",
                    "source": "trading_system",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "deal_omh_003_fe_dce_futures",
                "document": "–§—å—é—á–µ—Ä—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞ OMH-003: –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ 1,000 —Ç–æ–Ω–Ω –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã –Ω–∞ –î–∞–ª—è–Ω—å—Å–∫–æ–π —Ç–æ–≤–∞—Ä–Ω–æ–π –±–∏—Ä–∂–µ (DCE). –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: $110 –∑–∞ —Ç–æ–Ω–Ω—É (62% Fe CFR –ö–∏—Ç–∞–π). –û–±—â–∞—è –Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $110,000 USD. –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è: 10 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥–∞. –ú–µ—Å—è—Ü –ø–æ—Å—Ç–∞–≤–∫–∏: –º–∞–π 2025 –≥–æ–¥–∞. –¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: —Ñ—å—é—á–µ—Ä—Å –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É. –í–∞–ª—é—Ç–∞ —Ä–∞—Å—á–µ—Ç–æ–≤: USD. –°—Ç–∞—Ç—É—Å: –∏—Å–ø–æ–ª–Ω–µ–Ω–∞. –ú–∞—Ä–∂–∞ –ø–æ —Å–¥–µ–ª–∫–µ: 10% –æ—Ç –Ω–æ–º–∏–Ω–∞–ª–∞ ($11,000). –¶–µ–ª—å —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ —Å—Ç–∞–ª—å –∏–∑-–∑–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ö–∏—Ç–∞–µ. –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: DCE Clearing House.",
                "metadata": {
                    "deal_id": "OMH-003",
                    "type": "futures_hedge",
                    "commodity": "iron_ore",
                    "quantity_tons": 1000,
                    "price_usd_per_ton": 110,
                    "total_amount_usd": 110000,
                    "date": "2025-03-10",
                    "delivery_month": "May_2025",
                    "counterparty": "DCE Exchange",
                    "exchange": "DCE",
                    "contract_type": "futures",
                    "currency": "USD",
                    "status": "executed",
                    "risk_level": "low",
                    "margin_percent": 10,
                    "margin_usd": 11000,
                    "purpose": "price_hedging",
                    "region": "Asia",
                    "compliance_status": "exchange_traded",
                    "source": "futures_system",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "deal_omh_004_ni_indonesia",
                "document": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ OMH-004: –ó–∞–∫—É–ø–∫–∞ 300 —Ç–æ–Ω–Ω –Ω–∏–∫–µ–ª—è —É –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è PT Vale Indonesia. –¶–µ–Ω–∞: $18,000/—Ç–æ–Ω–Ω–∞. –°—É–º–º–∞: $5,400,000 USD. –î–∞—Ç–∞: 20 –∞–ø—Ä–µ–ª—è 2025. –î–æ—Å—Ç–∞–≤–∫–∞: Q3 2025. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —ç–∫—Å–ø–æ—Ä—Ç–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –æ—Ñ—à–æ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –†–∏—Å–∫–∏: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –Ω–∏–∫–µ–ª—è –∏–∑ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑-–∑–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: PT Vale Indonesia Tbk (LEI: 5493003D7O5Z4K6U172).",
                "metadata": {
                    "deal_id": "OMH-004",
                    "type": "special_purchase",
                    "commodity": "nickel",
                    "quantity_tons": 300,
                    "price_usd_per_ton": 18000,
                    "total_amount_usd": 5400000,
                    "date": "2025-04-20",
                    "delivery_period": "Q3_2025",
                    "counterparty": "PT Vale Indonesia Tbk",
                    "country": "Indonesia",
                    "special_terms": "export_license_required",
                    "currency": "USD",
                    "status": "conditional",
                    "risk_level": "high",
                    "risk_factors": ["indonesia_export_ban", "weather_delays", "offshore_structure"],
                    "region": "Southeast_Asia",
                    "compliance_status": "pending_approval",
                    "source": "special_deals",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "deal_omh_005_au_hedge",
                "document": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ OMH-005: –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ 500 —É–Ω—Ü–∏–π –∑–æ–ª–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ñ—å—é—á–µ—Ä—Å—ã COMEX. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: $2,650/—É–Ω—Ü–∏—è. –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $1,325,000 USD. –î–∞—Ç–∞: 5 –∏—é–Ω—è 2025. –°—Ä–æ–∫ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: –¥–µ–∫–∞–±—Ä—å 2025. –¶–µ–ª—å: –∑–∞—â–∏—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤. –ú–∞—Ä–∂–∞: 5% ($66,250). –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: CME Group Clearing. –°—Ç–∞—Ç—É—Å: –æ—Ç–∫—Ä—ã—Ç–∞.",
                "metadata": {
                    "deal_id": "OMH-005",
                    "type": "precious_hedge",
                    "commodity": "gold",
                    "quantity_oz": 500,
                    "price_usd_per_oz": 2650,
                    "total_amount_usd": 1325000,
                    "date": "2025-06-05",
                    "expiration": "Dec_2025",
                    "counterparty": "CME Group",
                    "exchange": "COMEX",
                    "contract_type": "futures",
                    "currency": "USD",
                    "status": "open",
                    "risk_level": "low",
                    "margin_percent": 5,
                    "margin_usd": 66250,
                    "purpose": "inflation_hedge",
                    "region": "Global",
                    "compliance_status": "exchange_traded",
                    "source": "investment_system",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            }
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        deal_docs = [d["document"] for d in deals]
        deal_meta = [d["metadata"] for d in deals]
        deal_ids = [d["id"] for d in deals]
        
        self.deals_collection.add(
            documents=deal_docs,
            metadatas=deal_meta,
            ids=deal_ids
        )
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(deals)} —Å–¥–µ–ª–æ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{self.COLLECTIONS['deals']}'")
        
        # 3. KYC –¥–æ–∫—É–º–µ–Ω—Ç—ã (4 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞)
        kyc = [
            {
                "id": "kyc_glencore_international",
                "document": "KYC –ø—Ä–æ—Ñ–∏–ª—å Glencore International AG - –≤–µ–¥—É—â–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å—ã—Ä—å–µ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ: Glencore International AG. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –®–≤–µ–π—Ü–∞—Ä–∏—è, Baar, Zug. LEI: 213800E2AWGCG8J3CS80. –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Ç–æ—Ä–≥–æ–≤–ª—è –º–µ—Ç–∞–ª–ª–∞–º–∏, –Ω–µ—Ñ—Ç—å—é, —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π. –ì–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç: $217 –º–ª—Ä–¥ (2023). –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ñ–∏—Å—ã: Baar (HQ), –õ–æ–Ω–¥–æ–Ω (—Ç–æ—Ä–≥–æ–≤–ª—è), –°–∏–Ω–≥–∞–ø—É—Ä (–ê–∑–∏—è), –ß–∏–∫–∞–≥–æ (–°–®–ê). –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: BBB+ (S&P). AML —Å—Ç–∞—Ç—É—Å: Clean (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Q4 2024). Sanctions screening: None (OFAC, EU, UN). –ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã: –ø—É–±–ª–∏—á–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è (LSE: GLEN). –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: Reuters, Bloomberg, SEC filings, OFAC database.",
                "metadata": {
                    "document_type": "kyc_profile",
                    "company_name": "Glencore International AG",
                    "lei": "213800E2AWGCG8J3CS80",
                    "legal_form": "AG",
                    "jurisdiction": "Switzerland",
                    "registration_city": "Baar",
                    "industry": "commodity_trading",
                    "sub_industry": "metals_oil_agri",
                    "annual_revenue_billion_usd": 217,
                    "credit_rating": "BBB+",
                    "aml_status": "clean",
                    "sanctions_status": "none",
                    "verification_sources": ["Reuters", "Bloomberg", "SEC", "OFAC", "EU_Sanctions"],
                    "beneficial_owners": "public_company_LSE_GLEN",
                    "risk_score": 2,
                    "risk_factors": ["complex_supply_chains", "emerging_markets"],
                    "documents_verified": ["incorporation_certificate", "financial_statements_2023", "ownership_structure", "aml_policy"],
                    "last_check_date": "2024-12-15",
                    "compliance_officer": "Chief Compliance Officer",
                    "compliance_framework": "Swiss_FINMA_ISO_37001",
                    "source": "corporate_database",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "kyc_sqm_chile",
                "document": "KYC –ø—Ä–æ—Ñ–∏–ª—å Sociedad Qu√≠mica y Minera de Chile S.A. (SQM) - –≤–µ–¥—É—â–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ª–∏—Ç–∏—è –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ: SQM S.A. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ß–∏–ª–∏, Santiago, Regi√≥n Metropolitana. LEI: 549300J7U7O5Z4K6U171. –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ–±—ã—á–∞ –ª–∏—Ç–∏—è –∏–∑ —Å–æ–ª—è–Ω–æ–≥–æ –æ–∑–µ—Ä–∞ Salar de Atacama, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —É–¥–æ–±—Ä–µ–Ω–∏–π –∏ –π–æ–¥–∞. –ì–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç: $7.4 –º–ª—Ä–¥ (2023). –í–ª–∞–¥–µ–ª—å—Ü—ã: Codelco (30%, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ß–∏–ª–∏), Tianqi Lithium (23%, –ö–∏—Ç–∞–π). –û—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: –∫–æ–Ω—Ü–µ—Å—Å–∏—è –Ω–∞ –¥–æ–±—ã—á—É –ª–∏—Ç–∏—è –≤ –°–∞–ª–∞—Ä-–¥–µ-–ê—Ç–∞–∫–∞–º–∞. AML —Å—Ç–∞—Ç—É—Å: Clean. Sanctions: None. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: filings CNMV (–ß–∏–ª–∏), SEC (USA ADR), OFAC, World Bank.",
                "metadata": {
                    "document_type": "kyc_profile",
                    "company_name": "SQM S.A.",
                    "lei": "549300J7U7O5Z4K6U171",
                    "legal_form": "S.A.",
                    "jurisdiction": "Chile",
                    "registration_city": "Santiago",
                    "industry": "mining_chemicals",
                    "sub_industry": "lithium_production",
                    "annual_revenue_billion_usd": 7.4,
                    "credit_rating": "BBB",
                    "aml_status": "clean",
                    "sanctions_status": "none",
                    "ownership_structure": "Codelco_30%, Tianqi_23%, public_47%",
                    "key_assets": "Salar_de_Atacama_concession",
                    "verification_sources": ["CNMV_Chile", "SEC_USA", "OFAC", "World_Bank"],
                    "risk_score": 3,
                    "risk_factors": ["chile_politics", "chinese_ownership", "environmental"],
                    "documents_verified": ["incorporation", "concession_agreement", "financial_statements", "ownership_disclosure"],
                    "last_check_date": "2024-11-20",
                    "compliance_officer": "Director of Legal and Compliance",
                    "compliance_framework": "Chile_SV_Superintendencia_ISO_37001",
                    "source": "mining_database",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "kyc_vale_indonesia",
                "document": "KYC –ø—Ä–æ—Ñ–∏–ª—å PT Vale Indonesia Tbk - –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∏–∫–µ–ª—è. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ: PT Vale Indonesia Tbk. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ò–Ω–¥–æ–Ω–µ–∑–∏—è, Jakarta. LEI: 549300K8I9J5Z4K6U180. –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ–±—ã—á–∞ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–µ–ª—è (–°–æ—Ä–æ–≤–∏—è, –°—É–ª–∞–≤–µ—Å–∏). –í–ª–∞–¥–µ–ª–µ—Ü: Vale S.A. (–ë—Ä–∞–∑–∏–ª–∏—è, 59.4%), Sumitomo Metal Mining (–Ø–ø–æ–Ω–∏—è, 15%). –ì–æ–¥–æ–≤–æ–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∏–∫–µ–ª—è: 80,000 —Ç–æ–Ω–Ω. AML —Å—Ç–∞—Ç—É—Å: Clean. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ downstream processing (–ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞). –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: IDX (–ò–Ω–¥–æ–Ω–µ–∑–∏—è), Vale annual report, OFAC.",
                "metadata": {
                    "document_type": "kyc_profile",
                    "company_name": "PT Vale Indonesia Tbk",
                    "lei": "549300K8I9J5Z4K6U180",
                    "legal_form": "Tbk",
                    "jurisdiction": "Indonesia",
                    "registration_city": "Jakarta",
                    "industry": "nickel_mining",
                    "sub_industry": "downstream_processing",
                    "annual_nickel_production_tons": 80000,
                    "ownership": "Vale_Brazil_59.4%, Sumitomo_Japan_15%",
                    "aml_status": "clean",
                    "sanctions_status": "none",
                    "special_terms": "indonesia_downstream_license",
                    "verification_sources": ["IDX_Indonesia", "Vale_Annual_Report", "OFAC"],
                    "risk_score": 4,
                    "risk_factors": ["indonesia_export_ban", "environmental", "local_content"],
                    "documents_verified": ["mining_license", "downstream_permit", "financials", "ownership"],
                    "last_check_date": "2024-10-15",
                    "compliance_officer": "VP Legal Indonesia",
                    "compliance_framework": "Indonesia_Minerba_ISO_37001",
                    "source": "mining_database",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            },
            {
                "id": "kyc_norilsk_nickel",
                "document": "KYC –ø—Ä–æ—Ñ–∏–ª—å PJSC MMC Norilsk Nickel - –∫—Ä—É–ø–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–∞–ª–ª–∞–¥–∏—è –∏ –Ω–∏–∫–µ–ª—è –≤ –†–æ—Å—Å–∏–∏. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ: –ü–ê–û ¬´–ì–ú–ö ¬´–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å¬ª. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞. LEI: 549300R4K5J5Z4K6U190. –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ–±—ã—á–∞ –Ω–∏–∫–µ–ª—è, –ø–∞–ª–ª–∞–¥–∏—è, –º–µ–¥–∏, –ø–ª–∞—Ç–∏–Ω—ã –Ω–∞ –¢–∞–π–º—ã—Ä–µ. –ì–æ–¥–æ–≤–∞—è –¥–æ–±—ã—á–∞: 200,000 —Ç–æ–Ω–Ω –Ω–∏–∫–µ–ª—è, 800,000 —É–Ω—Ü–∏–π –ø–∞–ª–ª–∞–¥–∏—è. –í–ª–∞–¥–µ–ª—å—Ü—ã: Rusal (27.8%), Crispian Investments (25.2%). AML —Å—Ç–∞—Ç—É—Å: Enhanced monitoring (—Å–∞–Ω–∫—Ü–∏–∏ –ï–°/–°–®–ê). –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä—É–±–ª–µ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: CBR Russia, OFAC, EU Sanctions List.",
                "metadata": {
                    "document_type": "kyc_profile",
                    "company_name": "PJSC MMC Norilsk Nickel",
                    "lei": "549300R4K5J5Z4K6U190",
                    "legal_form": "PAO",
                    "jurisdiction": "Russia",
                    "registration_city": "Moscow",
                    "industry": "mining_metals",
                    "sub_industry": "nickel_palladium",
                    "annual_nickel_tons": 200000,
                    "annual_palladium_oz": 800000,
                    "ownership": "Rusal_27.8%, Crispian_25.2%",
                    "aml_status": "enhanced_monitoring",
                    "sanctions_status": "EU_US_sanctions",
                    "special_terms": "ruble_payments",
                    "verification_sources": ["CBR_Russia", "OFAC", "EU_Sanctions", "Rusal_reports"],
                    "risk_score": 5,
                    "risk_factors": ["russia_sanctions", "geopolitics", "payment_restrictions"],
                    "documents_verified": ["registration", "financials", "ownership", "sanctions_disclosure"],
                    "last_check_date": "2025-01-10",
                    "compliance_officer": "Head of International Compliance",
                    "compliance_framework": "Russia_FATF_ISO_37001",
                    "source": "sanctioned_entities_db",
                    "loaded_at": datetime.now().isoformat(),
                    "environment": "test" if self.is_test_mode else "production"
                }
            }
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ KYC
        kyc_docs = [k["document"] for k in kyc]
        kyc_meta = [k["metadata"] for k in kyc]
        kyc_ids = [k["id"] for k in kyc]
        
        self.kyc_collection.add(
            documents=kyc_docs,
            metadatas=kyc_meta,
            ids=kyc_ids
        )
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(kyc)} KYC –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{self.COLLECTIONS['kyc']}'")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.get_collection_stats()
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, coll in self.COLLECTIONS.items():
            count = getattr(self, f"{key}_collection").count()
            print(f"   ‚Ä¢ {key}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return True
    
    def search_minerals(self, query: str, n_results: int = 3, filters: Optional[Dict] = None) -> Dict[str, Any]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –º–∏–Ω–µ—Ä–∞–ª–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        try:
            where_filter = filters or {}
            if self.is_test_mode:
                where_filter["environment"] = "test"
            
            results = self.minerals_collection.query(
                query_texts=[query],
                n_results=n_results,
                where=where_filter
            )
            
            enriched_results = []
            for doc, meta, dist in zip(results["documents"][0] or [], results["metadatas"][0] or [], results["distances"][0] or []):
                enriched = {
                    "document": doc,
                    "metadata": meta,
                    "distance": dist,
                    "relevance_score": 1 - dist,  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π score
                    "commodity_type": meta.get("type", "unknown"),
                    "current_price": f"${meta.get('current_price', 0):,.0f}/{meta.get('unit', 'N/A')}"
                }
                enriched_results.append(enriched)
            
            return {
                "success": True,
                "query": query,
                "filters": filters,
                "results_count": len(enriched_results),
                "results": enriched_results,
                "processing_time_ms": 0,  # TODO: –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                "environment": "test" if self.is_test_mode else "production"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–≤: {e}")
            return {"success": False, "error": str(e), "query": query}

    def rag_query(self, query: str, n_results: int = 3, filters: Optional[Dict] = None) -> Dict[str, Any]:
        """RAG query: Chroma search + OpenAI LLM summary"""
        try:
            # Step 1: Chroma search
            search_results = self.search_minerals(query, n_results, filters)
            if not search_results["success"]:
                return search_results
            
            # Step 2: Prepare context from results
            context_docs = [r["document"] for r in search_results["results"]]
            context = "\n\n".join(context_docs)
            
            # Step 3: LLM prompt
            prompt_template = PromptTemplate(
                input_variables=["query", "context"],
                template="""Based on the following mineral commodity information, answer the user's query in Russian.

Context:
{context}

User Query: {query}

Provide a concise, informative response focusing on key facts, prices, producers, and risks. Include any relevant market insights."""
            )
            
            # Step 4: OpenAI call
            if self.is_test_mode:
                # Mock response for testing
                llm_response = "–ú–æ–∫-–æ—Ç–≤–µ—Ç: –î–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö. –í production —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OpenAI."
            else:
                llm = ChatOpenAI(
                    model="gpt-4-turbo-preview",
                    temperature=0.1,
                    openai_api_key=os.getenv("OPENAI_API_KEY")
                )
                chain = prompt_template | llm | StrOutputParser()
                llm_response = chain.invoke({"query": query, "context": context})
            
            return {
                "success": True,
                "query": query,
                "rag_enabled": True,
                "chroma_results_count": search_results["results_count"],
                "llm_model": "gpt-4-turbo-preview" if not self.is_test_mode else "mock",
                "response": llm_response,
                "sources": [r["metadata"] for r in search_results["results"]],
                "environment": "test" if self.is_test_mode else "production"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ RAG query: {e}")
            return {"success": False, "error": str(e), "query": query}
    
    def search_deals(self, query: str, n_results: int = 5, status_filter: Optional[str] = None, risk_filter: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–¥–µ–ª–∫–∞–º"""
        try:
            where_filter = {}
            if status_filter:
                where_filter["status"] = status_filter
            if risk_filter:
                where_filter["risk_level"] = risk_filter
            if self.is_test_mode:
                where_filter["environment"] = "test"
            
            results = self.deals_collection.query(
                query_texts=[query],
                n_results=n_results,
                where=where_filter
            )
            
            enriched_results = []
            total_value = 0
            for doc, meta, dist in zip(results["documents"][0] or [], results["metadatas"][0] or [], results["distances"][0] or []):
                deal_value = meta.get("total_amount_usd", 0)
                total_value += deal_value
                
                enriched = {
                    "document": doc,
                    "metadata": meta,
                    "distance": dist,
                    "relevance_score": 1 - dist,
                    "deal_value_usd": f"${deal_value:,.0f}",
                    "status": meta.get("status", "unknown"),
                    "risk": meta.get("risk_level", "unknown"),
                    "counterparty": meta.get("counterparty", "N/A")
                }
                enriched_results.append(enriched)
            
            return {
                "success": True,
                "query": query,
                "filters": {"status": status_filter, "risk": risk_filter},
                "results_count": len(enriched_results),
                "total_deal_value_usd": total_value,
                "results": enriched_results,
                "environment": "test" if self.is_test_mode else "production"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫: {e}")
            return {"success": False, "error": str(e), "query": query}
    
    def search_kyc(self, query: str, n_results: int = 3, aml_filter: Optional[str] = "clean") -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ KYC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å compliance —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        try:
            where_filter = {"aml_status": aml_filter}
            if self.is_test_mode:
                where_filter["environment"] = "test"
            
            results = self.kyc_collection.query(
                query_texts=[query],
                n_results=n_results,
                where=where_filter
            )
            
            clean_count = 0
            total_risk_score = 0
            enriched_results = []
            
            for doc, meta, dist in zip(results["documents"][0] or [], results["metadatas"][0] or [], results["distances"][0] or []):
                risk_score = meta.get("risk_score", 0)
                total_risk_score += risk_score
                
                if meta.get("aml_status") == "clean":
                    clean_count += 1
                
                enriched = {
                    "document": doc,
                    "metadata": meta,
                    "distance": dist,
                    "relevance_score": 1 - dist,
                    "company": meta.get("company_name", "N/A"),
                    "jurisdiction": meta.get("jurisdiction", "N/A"),
                    "aml_status": meta.get("aml_status", "unknown"),
                    "risk_score": risk_score,
                    "risk_level": "low" if risk_score <= 2 else "medium" if risk_score <= 3 else "high",
                    "lei": meta.get("lei", "N/A"),
                    "verification_sources": meta.get("verification_sources", [])
                }
                enriched_results.append(enriched)
            
            avg_risk = total_risk_score / len(enriched_results) if enriched_results else 0
            
            return {
                "success": True,
                "query": query,
                "aml_filter": aml_filter,
                "results_count": len(enriched_results),
                "clean_entities": clean_count,
                "average_risk_score": round(avg_risk, 1),
                "results": enriched_results,
                "environment": "test" if self.is_test_mode else "production"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ KYC: {e}")
            return {"success": False, "error": str(e), "query": query}
    
    def get_collection_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        try:
            stats = {
                "minerals": self.minerals_collection.count(),
                "deals": self.deals_collection.count(),
                "kyc": self.kyc_collection.count(),
                "total_vectors": self.minerals_collection.count() + self.deals_collection.count() + self.kyc_collection.count(),
                "status": "healthy",
                "last_updated": datetime.now().isoformat(),
                "environment": "test" if self.is_test_mode else "production"
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
            deals_meta = self.deals_collection.get()["metadatas"] or []
            total_deal_value = sum(d.get("total_amount_usd", 0) for d in deals_meta)
            confirmed_deals = sum(1 for d in deals_meta if d.get("status") == "confirmed")
            
            stats["deals_value_usd"] = total_deal_value
            stats["confirmed_deals"] = confirmed_deals
            stats["deals_avg_value"] = total_deal_value / len(deals_meta) if deals_meta else 0
            
            return {"success": True, "data": stats}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"success": False, "error": str(e)}
    
    def add_document(self, collection_name: str, document: str, metadata: Dict[str, Any], id: Optional[str] = None) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        try:
            coll_map = {
                "minerals": self.minerals_collection,
                "deals": self.deals_collection,
                "kyc": self.kyc_collection
            }
            
            if collection_name not in coll_map:
                return {"success": False, "error": f"Unknown collection: {collection_name}"}
            
            doc_id = id or f"doc_{uuid.uuid4().hex[:8]}"
            metadata["added_at"] = datetime.now().isoformat()
            metadata["source"] = "api_add_document"
            if self.is_test_mode:
                metadata["test_mode"] = True
                metadata["environment"] = "test"
            else:
                metadata["environment"] = "production"
            
            coll_map[collection_name].add(
                documents=[document],
                metadatas=[metadata],
                ids=[doc_id]
            )
            
            return {
                "success": True,
                "collection": collection_name,
                "document_id": doc_id,
                "new_count": coll_map[collection_name].count(),
                "test_mode": self.is_test_mode
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}

    def cleanup_test_db(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î (—É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ —Ñ–∞–π–ª–æ–≤)"""
        if not self.is_test_mode:
            logger.warning("cleanup_test_db –≤—ã–∑–≤–∞–Ω –Ω–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            return False
        
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            for coll_name in self.COLLECTIONS.values():
                try:
                    self.client.delete_collection(coll_name)
                    logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {coll_name} —É–¥–∞–ª–µ–Ω–∞")
                except Exception as coll_e:
                    logger.debug(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {coll_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {coll_e}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ë–î
            import shutil
            if os.path.exists(self.test_db_path):
                shutil.rmtree(self.test_db_path)
                logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –ë–î {self.test_db_path} —É–¥–∞–ª–µ–Ω–∞")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            self.client = chromadb.PersistentClient(path=self.test_db_path)
            self._setup_collections()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
chroma_service: Optional[ChromaService] = None
test_chroma_service: Optional[ChromaService] = None

def get_chroma_service(is_test_mode: bool = False) -> ChromaService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Chroma —Å–µ—Ä–≤–∏—Å–∞ (prod –∏–ª–∏ test)"""
    global chroma_service, test_chroma_service
    
    if is_test_mode:
        if test_chroma_service is None:
            test_chroma_service = ChromaService(is_test_mode=True)
        return test_chroma_service
    else:
        if chroma_service is None:
            chroma_service = ChromaService(is_test_mode=False)
        return chroma_service
