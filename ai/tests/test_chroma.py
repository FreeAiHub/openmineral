"""
–¢–µ—Å—Ç—ã Chroma –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è OpenMineralHub
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
"""

import pytest
import sys
import os
import shutil
from unittest.mock import patch, MagicMock
from ai.chroma_service import ChromaService, get_chroma_service
from ai.data_loader import DataLoader

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
TEST_DB_PATH = "./chroma_test_db"
COLLECTIONS = {
    "minerals": "openmineral_minerals",
    "deals": "openmineral_deals", 
    "kyc": "openmineral_kyc"
}

@pytest.fixture
def mock_chroma_client():
    """–ú–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ Chroma –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤"""
    mock_client = MagicMock()
    mock_collection = MagicMock()
    
    # –ú–æ–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    mock_collection.count.return_value = 0
    mock_collection.query.return_value = {
        "ids": [[]],
        "documents": [[]],
        "metadatas": [[]],
        "distances": [[]]
    }
    mock_collection.get.return_value = {
        "ids": [],
        "documents": [],
        "metadatas": []
    }
    mock_collection.add.return_value = None
    
    # –ú–æ–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
    mock_client.get_or_create_collection.return_value = mock_collection
    mock_client.create_collection.return_value = mock_collection
    mock_client.list_collections.return_value = [mock_collection]
    
    return mock_client

@pytest.fixture(scope="session", autouse=True)
def setup_test_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    if os.path.exists(TEST_DB_PATH):
        shutil.rmtree(TEST_DB_PATH)
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    if os.path.exists(TEST_DB_PATH):
        shutil.rmtree(TEST_DB_PATH)
        print(f"üßπ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î {TEST_DB_PATH} —É–¥–∞–ª–µ–Ω–∞")

class TestChromaService:
    """Unit —Ç–µ—Å—Ç—ã ChromaService"""
    
    def test_init_production_mode(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ production —Ä–µ–∂–∏–º–µ"""
        try:
            service = ChromaService(is_test_mode=False)
            assert service.client is not None
            assert not service.is_test_mode
            assert hasattr(service, 'minerals_collection')
            assert hasattr(service, 'deals_collection')
            assert hasattr(service, 'kyc_collection')
            print("‚úÖ ChromaService (production) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            pytest.skip(f"Chroma Cloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_init_test_mode(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ test —Ä–µ–∂–∏–º–µ"""
        service = ChromaService(is_test_mode=True)
        assert service.client is not None
        assert service.is_test_mode
        assert service.test_db_path == "./chroma_test_db"
        assert hasattr(service, 'minerals_collection')
        assert hasattr(service, 'deals_collection')
        assert hasattr(service, 'kyc_collection')
        print("‚úÖ ChromaService (test mode) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def test_get_chroma_service(self):
        """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ get_chroma_service"""
        # Production —Ä–µ–∂–∏–º
        prod_service = get_chroma_service(is_test_mode=False)
        assert not prod_service.is_test_mode
        assert prod_service == get_chroma_service(is_test_mode=False)  # Singleton
        
        # Test —Ä–µ–∂–∏–º
        test_service = get_chroma_service(is_test_mode=True)
        assert test_service.is_test_mode
        assert test_service == get_chroma_service(is_test_mode=True)  # Singleton
        
        # –†–∞–∑–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        assert prod_service != test_service
        print("‚úÖ get_chroma_service singleton —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_collections_metadata(self):
        """–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        test_service = ChromaService(is_test_mode=True)
        prod_service = ChromaService(is_test_mode=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        test_meta = test_service.minerals_collection.metadata
        assert test_meta["environment"] == "test"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ production –ë–î
        if hasattr(prod_service.minerals_collection, 'metadata'):
            prod_meta = prod_service.minerals_collection.metadata
            assert prod_meta["environment"] == "production"
        
        print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    def test_load_initial_data_test_mode(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ test —Ä–µ–∂–∏–º–µ"""
        service = get_chroma_service(is_test_mode=True)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        service.cleanup_test_db()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        success = service.load_initial_data()
        assert success is True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = service.get_collection_stats()
        assert stats["success"] is True
        
        data = stats["data"]
        minerals_count = data["minerals"]
        deals_count = data["deals"]
        kyc_count = data["kyc"]
        total = data["total_vectors"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        assert minerals_count == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –º–∏–Ω–µ—Ä–∞–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {minerals_count}"
        assert deals_count == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 —Å–¥–µ–ª–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ {deals_count}"
        assert kyc_count == 4, f"–û–∂–∏–¥–∞–ª–æ—Å—å 4 KYC, –ø–æ–ª—É—á–µ–Ω–æ {kyc_count}"
        assert total == 14, f"–û–∂–∏–¥–∞–ª–æ—Å—å 14 –≤–µ–∫—Ç–æ—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {total}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        minerals_meta = service.minerals_collection.get()["metadatas"]
        for meta in minerals_meta:
            assert meta["environment"] == "test"
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ test –ë–î: –º–∏–Ω–µ—Ä–∞–ª—ã={minerals_count}, —Å–¥–µ–ª–∫–∏={deals_count}, KYC={kyc_count}")
    
    def test_load_initial_data_production(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ production —Ä–µ–∂–∏–º–µ"""
        try:
            service = get_chroma_service(is_test_mode=False)
            success = service.load_initial_data()
            assert success is True
            
            stats = service.get_collection_stats()
            assert stats["success"] is True
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ production –ë–î")
        except Exception as e:
            pytest.skip(f"Production –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: {e}")
    
    def test_search_minerals_test_mode(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –º–∏–Ω–µ—Ä–∞–ª–∞–º –≤ test —Ä–µ–∂–∏–º–µ"""
        service = get_chroma_service(is_test_mode=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        service.load_initial_data()
        
        # –ü–æ–∏—Å–∫
        results = service.search_minerals("–º–µ–¥—å", n_results=2)
        
        assert results["success"] is True
        assert results["environment"] == "test"
        assert "results" in results
        assert isinstance(results["results"], list)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ environment
        test_results = service.search_minerals("–º–µ–¥—å", filters={"environment": "test"})
        assert test_results["success"] is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ test –ë–î
        assert len(test_results["results"]) > 0
        
        first_result = test_results["results"][0]
        assert "document" in first_result
        assert "metadata" in first_result
        assert first_result["metadata"]["environment"] == "test"
        assert "relevance_score" in first_result
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ test —Ä–µ–∂–∏–º–µ: {test_results['results_count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    def test_search_deals_with_filters(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        service = get_chroma_service(is_test_mode=True)
        service.load_initial_data()
        
        # –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        results = service.search_deals(
            query="–º–µ–¥—å", 
            status_filter="confirmed", 
            risk_filter="medium"
        )
        
        assert results["success"] is True
        assert results["environment"] == "test"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        for result in results["results"]:
            meta = result["metadata"]
            assert meta.get("status") == "confirmed"
            assert meta.get("risk_level") == "medium"
            assert meta.get("environment") == "test"
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {results['results_count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    def test_search_kyc_aml_filter(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ KYC —Å AML —Ñ–∏–ª—å—Ç—Ä–æ–º"""
        service = get_chroma_service(is_test_mode=True)
        service.load_initial_data()
        
        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ clean –∫–æ–º–ø–∞–Ω–∏–π
        results = service.search_kyc("mining", aml_filter="clean")
        
        assert results["success"] is True
        assert results["environment"] == "test"
        assert results["aml_filter"] == "clean"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã clean
        clean_count = 0
        for result in results["results"]:
            if result["aml_status"] == "clean":
                clean_count += 1
        
        assert clean_count == len(results["results"])
        assert results["clean_entities"] == clean_count
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ KYC —Å AML —Ñ–∏–ª—å—Ç—Ä–æ–º: {results['results_count']} clean —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    def test_add_document_test_mode(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ test —Ä–µ–∂–∏–º–µ"""
        service = get_chroma_service(is_test_mode=True)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        service.cleanup_test_db()
        
        test_doc = {
            "collection_name": "deals",
            "document": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ OMH-TEST-001: –ü—Ä–æ–¥–∞–∂–∞ 100 —Ç–æ–Ω–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            "metadata": {
                "deal_id": "OMH-TEST-001",
                "commodity": "test_metal",
                "quantity_tons": 100,
                "price_usd_per_ton": 10000,
                "total_amount_usd": 1000000,
                "status": "test",
                "risk_level": "low",
                "source": "test_add_document"
            }
        }
        
        result = service.add_document(
            collection_name=test_doc["collection_name"],
            document=test_doc["document"],
            metadata=test_doc["metadata"],
            id="test_doc_001"
        )
        
        assert result["success"] is True
        assert result["document_id"] == "test_doc_001"
        assert result["test_mode"] is True
        assert result["new_count"] == 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω
        added_docs = service.deals_collection.get(ids=["test_doc_001"])
        assert len(added_docs["documents"]) == 1
        assert added_docs["documents"][0] == test_doc["document"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta = added_docs["metadatas"][0]
        assert meta["test_mode"] is True
        assert meta["environment"] == "test"
        assert meta["added_at"] is not None
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ test –ë–î: {result['document_id']}")
    
    def test_cleanup_test_db(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
        service = get_chroma_service(is_test_mode=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        service.load_initial_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        initial_stats = service.get_collection_stats()
        initial_total = initial_stats["data"]["total_vectors"]
        assert initial_total == 14
        
        # –û—á–∏—Å—Ç–∫–∞
        success = service.cleanup_test_db()
        assert success is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –ø—É—Å—Ç–∞
        final_stats = service.get_collection_stats()
        final_total = final_stats["data"]["total_vectors"]
        assert final_total == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã
        assert service.minerals_collection is not None
        assert service.deals_collection is not None
        assert service.kyc_collection is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î –ø—É—Å—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞
        assert os.path.exists(TEST_DB_PATH)
        db_files = os.listdir(TEST_DB_PATH)
        assert len(db_files) > 0  # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã ChromaDB
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –æ—á–∏—â–µ–Ω–∞: {initial_total} ‚Üí {final_total} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    def test_collection_stats_test_mode(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ test —Ä–µ–∂–∏–º–µ"""
        service = get_chroma_service(is_test_mode=True)
        service.load_initial_data()
        
        stats = service.get_collection_stats()
        
        assert stats["success"] is True
        assert stats["data"]["environment"] == "test"
        
        data = stats["data"]
        assert "minerals" in data
        assert "deals" in data
        assert "kyc" in data
        assert data["total_vectors"] == 14
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–µ–ª–æ–∫
        assert data["deals_value_usd"] > 0
        assert data["confirmed_deals"] >= 1
        assert data["deals_avg_value"] > 0
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ test –ë–î: {data['minerals']}+{data['deals']}+{data['kyc']}={data['total_vectors']}")
    
    @pytest.mark.skip(reason="–¢—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö production")
    def test_production_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç production –ë–î"""
        service = get_chroma_service(is_test_mode=False)
        stats = service.get_collection_stats()
        assert stats["success"] is True
        print(f"‚úÖ Production –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞: {stats['data']['total_vectors']} –≤–µ–∫—Ç–æ—Ä–æ–≤")

class TestDataLoader:
    """–¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_load_minerals_catalog_test_mode(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ test —Ä–µ–∂–∏–º–µ"""
        try:
            from ai.data_loader import DataLoader
            success = DataLoader.load_minerals_catalog(test_mode=True)
            assert success is True
            print("‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ (test) —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except ImportError:
            pytest.skip("DataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_load_sample_deals_test_mode(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫ –≤ test —Ä–µ–∂–∏–º–µ"""
        try:
            from ai.data_loader import DataLoader
            success = DataLoader.load_sample_deals(test_mode=True)
            assert success is True
            print("‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–¥–µ–ª–æ–∫ (test) —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except ImportError:
            pytest.skip("DataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    @pytest.mark.skip(reason="DataLoader –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å test_mode")
    def test_load_all_data_test_mode(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ test —Ä–µ–∂–∏–º–µ"""
        try:
            from ai.data_loader import DataLoader
            success = DataLoader.load_all_data(test_mode=True)
            assert success is True
            print("‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (test) —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            pytest.skip(f"DataLoader test_mode –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {e}")

class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_full_test_pipeline(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ ‚Üí –ø–æ–∏—Å–∫ ‚Üí –æ—á–∏—Å—Ç–∫–∞ –≤ test —Ä–µ–∂–∏–º–µ"""
        print("\nüß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        
        service = get_chroma_service(is_test_mode=True)
        
        # 1. –û—á–∏—Å—Ç–∫–∞
        print("1. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...")
        service.cleanup_test_db()
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        success = service.load_initial_data()
        assert success is True
        
        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = service.get_collection_stats()
        assert stats["success"] is True
        assert stats["data"]["total_vectors"] == 14
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['data']['minerals']}+{stats['data']['deals']}+{stats['data']['kyc']}={stats['data']['total_vectors']}")
        
        # 4. –ü–æ–∏—Å–∫
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
        
        mineral_results = service.search_minerals("–±–∞—Ç–∞—Ä–µ–π–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã", n_results=2)
        deal_results = service.search_deals("–º–µ–¥–Ω—ã–µ —Å–¥–µ–ª–∫–∏", n_results=2)
        kyc_results = service.search_kyc("Glencore", n_results=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö –∏ environment
        for results in [mineral_results, deal_results, kyc_results]:
            assert results["success"] is True
            assert results["environment"] == "test"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_results = (mineral_results["results_count"] + 
                        deal_results["results_count"] + 
                        kyc_results["results_count"])
        assert total_results > 0
        
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤: {mineral_results['results_count']}")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {deal_results['results_count']}")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ KYC: {kyc_results['results_count']}")
        
        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        add_result = service.add_document(
            collection_name="deals",
            document="–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            metadata={
                "deal_id": "TEST-001",
                "commodity": "test",
                "status": "test",
                "total_amount_usd": 1000
            },
            id="integration_test_doc"
        )
        assert add_result["success"] is True
        assert add_result["new_count"] == 6  # 5 –∏—Å—Ö–æ–¥–Ω—ã—Ö + 1 –Ω–æ–≤—ã–π
        
        # 6. –û—á–∏—Å—Ç–∫–∞
        print("6. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
        cleanup_success = service.cleanup_test_db()
        assert cleanup_success is True
        
        final_stats = service.get_collection_stats()
        assert final_stats["data"]["total_vectors"] == 0
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        service = get_chroma_service(is_test_mode=True)
        
        # –¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        result = service.add_document(
            collection_name="unknown_collection",
            document="test",
            metadata={}
        )
        assert not result["success"]
        assert "error" in result
        assert "Unknown collection" in result["error"]
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            service.search_minerals(query="", n_results=-1)
            assert False, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–Ω—è—Ç exception"
        except Exception:
            pass  # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    pytest.main([__file__, "-v"])
